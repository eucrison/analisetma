# ===============================================
# requests.py
# ===============================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ==============================
# Fun√ß√£o principal de leitura
# ==============================
def load_data(uploaded_file):
    df = pd.read_csv(uploaded_file)
    df.columns = [c.strip().lower() for c in df.columns]
    return df

# ==============================
# An√°lises estat√≠sticas
# ==============================
def resumo_geral(df):
    resumo = {
        "Total de registros": len(df),
        "Total de agentes √∫nicos": df["agente_email"].nunique(),
        "Total de l√≠deres √∫nicos": df["lider"].nunique() if "lider" in df.columns else None,
        "Tempo m√©dio geral (s)": df["tma_segundos"].mean(),
        "Tempo m√°ximo (s)": df["tma_segundos"].max(),
        "Tempo m√≠nimo (s)": df["tma_segundos"].min(),
        "M√©dia de tickets por agente": df.groupby("agente_email")["qtd_motivos"].sum().mean(),
    }
    return resumo

# ==============================
# Rankings
# ==============================
def top_agentes_qtd(df, n=10):
    return (
        df.groupby("agente_email")["qtd_motivos"]
        .sum()
        .sort_values(ascending=False)
        .head(n)
        .reset_index()
    )

def top_agentes_tma(df, n=10):
    media_tma = df.groupby("agente_email")["tma_segundos"].mean().reset_index()
    return (
        media_tma.sort_values("tma_segundos")
        .head(n)
        .rename(columns={"tma_segundos": "tma_medio"})
    ), (
        media_tma.sort_values("tma_segundos", ascending=False)
        .head(n)
        .rename(columns={"tma_segundos": "tma_medio"})
    )

# ==============================
# Gr√°ficos
# ==============================
def grafico_boxplot_tma(df):
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.boxplot(x=df["tma_segundos"], color="#9ecae1", ax=ax, showfliers=False)
    ax.set_title("Distribui√ß√£o do Tempo M√©dio de Atendimento (TMA)")
    ax.set_xlabel("Tempo (segundos)")
    return fig

def grafico_dispersa_produtividade(df):
    df_agente = df.groupby("agente_email").agg(
        qtd_total=("qtd_motivos", "sum"),
        tma_medio=("tma_segundos", "mean")
    ).reset_index()

    fig, ax = plt.subplots(figsize=(8, 6))
    sns.scatterplot(
        data=df_agente,
        x="qtd_total",
        y="tma_medio",
        alpha=0.7,
        ax=ax,
        color="#3182bd"
    )
    ax.set_title("Rela√ß√£o entre Volume de Tickets e TMA por Agente")
    ax.set_xlabel("Volume de tickets")
    ax.set_ylabel("TMA m√©dio (segundos)")
    return fig

def grafico_barra_media(df, coluna, titulo):
    df_media = df.groupby(coluna)["tma_segundos"].mean().sort_values()
    fig, ax = plt.subplots(figsize=(8, 5))
    df_media.plot(kind="barh", ax=ax, color="#6baed6")
    ax.set_title(f"TMA m√©dio por {coluna.capitalize()}")
    ax.set_xlabel("TMA m√©dio (segundos)")
    ax.grid(axis="x", linestyle="--", alpha=0.6)
    return fig

# ==============================
# Insights autom√°ticos
# ==============================
def gerar_insights(df):
    insights = []

    tma_medio = df["tma_segundos"].mean()
    qtd_agentes = df["agente_email"].nunique()
    qtd_total = len(df)

    # --- Efici√™ncia geral ---
    if tma_medio < 1200:
        insights.append(f"‚ö° O tempo m√©dio geral de atendimento ({tma_medio:.0f}s) indica **alta efici√™ncia operacional**.")
    elif tma_medio < 2400:
        insights.append(f"‚úÖ O tempo m√©dio geral de {tma_medio:.0f}s √© **adequado** para processos de atendimento humano.")
    else:
        insights.append(f"‚ö†Ô∏è O tempo m√©dio geral de {tma_medio:.0f}s √© **alto**, sugerindo poss√≠veis gargalos ou tickets complexos.")

    # --- Outliers de TMA ---
    outliers_alto = df[df["tma_segundos"] > tma_medio * 3]
    if len(outliers_alto) > 0:
        insights.append(f"üîé Foram encontrados {len(outliers_alto)} registros com TMA muito acima da m√©dia ‚Äî revisar poss√≠veis tickets travados.")

    # --- Agentes de destaque ---
    top_qtd = top_agentes_qtd(df).iloc[0]
    menor_tma, maior_tma = top_agentes_tma(df)
    melhor_agente = menor_tma.iloc[0]
    pior_agente = maior_tma.iloc[0]

    insights.append(f"üèÖ O agente **{top_qtd['agente_email']}** registrou o maior volume de tickets ({top_qtd['qtd_motivos']} atendimentos).")
    insights.append(f"üí® O agente mais r√°pido foi **{melhor_agente['agente_email']}**, com TMA m√©dio de {melhor_agente['tma_medio']:.0f}s.")
    insights.append(f"üê¢ O agente com maior TMA foi **{pior_agente['agente_email']}**, com m√©dia de {pior_agente['tma_medio']:.0f}s.")

    # --- Varia√ß√µes por produto ou jornada ---
    if "produto" in df.columns:
        prod_maior = df.groupby("produto")["tma_segundos"].mean().idxmax()
        prod_menor = df.groupby("produto")["tma_segundos"].mean().idxmin()
        insights.append(f"üì¶ O produto com **maior TMA m√©dio** √© `{prod_maior}`, enquanto o **mais √°gil** √© `{prod_menor}`.")

    if "jornada" in df.columns:
        jor_maior = df.groupby("jornada")["tma_segundos"].mean().idxmax()
        jor_menor = df.groupby("jornada")["tma_segundos"].mean().idxmin()
        insights.append(f"üß≠ A jornada com **maior tempo m√©dio** √© `{jor_maior}`, e a mais eficiente √© `{jor_menor}`.")

    return insights
